# 1st Question 
def caesar_cipher(text, k):
    result = ""
    for char in text:
        if char.isalpha():
            shift = ord('A') if char.isupper() else ord('a')
            result += chr((ord(char) - shift + k) % 26 + shift)
        else:
            result += char
    return result
# Example usage
print(caesar_cipher("HELLO WORLD", 3))  # Output: KHOOR ZRUOG



#2nd Question 
import string
def monoalphabetic_cipher(text, key):
    alpha = string.ascii_lowercase
    key_map = {alpha[i]: key[i] for i in range(len(alpha))}
    result = ""
    for char in text:
        if char.isalpha():
            result += key_map[char.lower()].upper() if char.isupper() else key_map[char]
        else:
            result += char
    return result
# Example usage
cipher_key = "qazwsxedcrfvtgbyhnujmikolp"  # Example key mapping
print(monoalphabetic_cipher("hello", cipher_key))  # Output: a specific substitution



#3rd Question 
import string
def playfair_cipher(text, key):
    def create_matrix(key):
        key = "".join(dict.fromkeys(key + string.ascii_lowercase.replace('j', '')))
        return [list(key[i:i+5]) for i in range(0, 25, 5)]
    
    def find_position(matrix, letter):
        for row in range(5):
            for col in range(5):
                if matrix[row][col] == letter:
                    return row, col
        return None
    matrix = create_matrix(key)
    text = text.replace("j", "i")
    if len(text) % 2 != 0:
        text += "x"
    result = ""
    for i in range(0, len(text), 2):
        a, b = text[i], text[i + 1]
        row_a, col_a = find_position(matrix, a)
        row_b, col_b = find_position(matrix, b)
        if row_a == row_b:
            result += matrix[row_a][(col_a + 1) % 5] + matrix[row_b][(col_b + 1) % 5]
        elif col_a == col_b:
            result += matrix[(row_a + 1) % 5][col_a] + matrix[(row_b + 1) % 5][col_b]
        else:
            result += matrix[row_a][col_b] + matrix[row_b][col_a]
    return result
# Example usage
print(playfair_cipher("hello", "keyword"))  # Encrypted text output



#4th Question 
import collections
def frequency_analysis(ciphertext):
    freq = collections.Counter(ciphertext)
    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)
    return sorted_freq
# Example usage
cipher_text = "Uifsf jt b tfdsfu nfttbhf"
print(frequency_analysis(cipher_text))  # Frequency of characters



#5th Question 
def keyword_monoalphabetic_cipher(text, keyword):
    key = "".join(dict.fromkeys(keyword + string.ascii_lowercase))
    alpha = string.ascii_lowercase
    cipher_map = {alpha[i]: key[i] for i in range(len(alpha))}
    result = ""
    for char in text:
        if char.isalpha():
            result += cipher_map[char.lower()].upper() if char.isupper() else cipher_map[char]
        else:
            result += char
    return result
# Example usage
print(keyword_monoalphabetic_cipher("hello", "CIPHER"))  # Output based on the keyword cipher

